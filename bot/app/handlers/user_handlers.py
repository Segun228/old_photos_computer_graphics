import logging
import re
import zipfile
import io
from .router import user_router as router
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram import F
from typing import Dict, Any
from aiogram.fsm.context import FSMContext
from aiogram import Router, Bot
from aiogram.exceptions import TelegramAPIError
from io import BytesIO
import asyncio
from collections import defaultdict
from aiogram.types import InputFile
import aiohttp
from app.keyboards import inline_user as inline_keyboards


from aiohttp import FormData
from aiogram import Bot
from app.states.states import Set



#===========================================================================================================================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
#===========================================================================================================================


@router.message(CommandStart())
async def cmd_start_admin(message: Message, state: FSMContext):
    await message.reply("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! üëã")
    await message.answer("–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –∑–∞—Å—Ç–∞—Ä–∏—Ç—å –≤–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
    await message.answer("–°–µ–π—á–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —à—É–º, —Ç–µ–∫—Å—Ç—É—Ä—ã, –∞ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ–ø–∏–∏")
    await message.answer("–Ø –º–Ω–æ–≥–æ —á—Ç–æ —É–º–µ—é üëá", reply_markup=inline_keyboards.main)




@router.callback_query(F.data == "restart")
async def callback_start_admin(callback: CallbackQuery, state: FSMContext):
    await state.clear()

    await callback.message.reply("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! üëã")
    await callback.message.answer("–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –∑–∞—Å—Ç–∞—Ä–∏—Ç—å –≤–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
    await callback.message.answer("–°–µ–π—á–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —à—É–º, —Ç–µ–∫—Å—Ç—É—Ä—ã, –∞ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ–ø–∏–∏")
    await callback.message.answer("–Ø –º–Ω–æ–≥–æ —á—Ç–æ —É–º–µ—é üëá", reply_markup=inline_keyboards.main)
    await callback.answer()


@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery):
    await callback.message.answer("–Ø –º–Ω–æ–≥–æ —á—Ç–æ —É–º–µ—é üëá", reply_markup=inline_keyboards.main)
    await callback.answer()


@router.callback_query(F.data == "about_dev")
async def about_dev_callback(callback: CallbackQuery):
    await callback.message.answer("https://github.com/Segun228")
    await callback.message.answer("–†–∞–∑—Ä–∞–±–æ—Ç–∞–ª –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å—Ç—É–¥–µ–Ω—Ç –ë–ò–í-243 –ù–æ—Ä–æ—Ö–∞ –ù.", reply_markup=inline_keyboards.back)
    await callback.answer()


@router.callback_query(F.data == "help")
async def help_callback(callback: CallbackQuery):
    await callback.message.answer("–°–ª–µ–¥—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–∏—è–º –±–æ—Ç–∞")
    await callback.message.answer("–°–µ–ø–∏—è - —Å—Ç–µ–ø–µ–Ω—å –æ—Ç—Ç–µ–Ω–∫–∞ –∫–æ—Ä–∏—á–Ω–µ–≤–æ–≥–æ –≤ —Ñ–æ—Ç–æ")
    await callback.message.answer("–®—É–º - —Å—Ç–µ–ø–µ–Ω—å –∑–∞—à—É–º–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∑–µ–Ω–∏—Å—Ç–æ—Å—Ç–∏ —Ñ–æ—Ç–æ", reply_markup=inline_keyboards.back)
    await callback.answer()

#===========================================================================================================================
# –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
#===========================================================================================================================
user_photos = defaultdict(list)

@router.callback_query(F.data == "photo_start")
async def photo_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —à—É–º–∞ (–æ—Ç 0 –¥–æ 100):")
    await state.set_state(Set.noise)


@router.message(Set.noise)
async def set_noise(message: Message, state: FSMContext):
    await state.update_data(noise=int(message.text))
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–µ–ø–∏–∏ (–æ—Ç 0 –¥–æ 100):")
    await state.set_state(Set.sepia)


@router.message(Set.sepia)
async def set_sepia(message: Message, state: FSMContext):
    await state.update_data(sepia=int(message.text))
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ü–∞—Ä–∞–ø–∏–Ω/—Ç–µ–∫—Å—Ç—É—Ä—ã (–æ—Ç 0 –¥–æ 100):")
    await state.set_state(Set.texture)


@router.message(Set.texture)
async def set_texture(message: Message, state: FSMContext):
    await state.update_data(texture=int(message.text))
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–æ—Ç–æ (–æ—Ç 10 –¥–æ 100):")
    await state.set_state(Set.quality)


@router.message(Set.quality)
async def set_quality(message: Message, state: FSMContext):
    await state.update_data(quality=int(message.text))
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Å–∫–∏–¥—ã–≤–∞–π—Ç–µ —Ñ–æ—Ç–æ –ø–æ –æ–¥–Ω–æ–º—É.\n–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ *–≥–æ—Ç–æ–≤–æ*."
    )
    await state.set_state(Set.handle_photo)


@router.message(F.photo, Set.handle_photo)
async def save_photo(message: Message):
    file_id = message.photo[-1].file_id
    user_photos[message.from_user.id].append(file_id)
    await message.answer("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ '–≥–æ—Ç–æ–≤–æ'")

@router.message(F.text.lower() == "–≥–æ—Ç–æ–≤–æ", Set.handle_photo)
async def send_photos_to_server(message: Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    file_ids = list(dict.fromkeys(user_photos.pop(user_id, [])))  # —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    if not file_ids:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ.")
        return

    data = await state.get_data()

    form = aiohttp.FormData()
    for idx, file_id in enumerate(file_ids):
        tg_file = await bot.get_file(file_id)
        file_bytes = await bot.download_file(tg_file.file_path)
        form.add_field(
            name="files",
            value=file_bytes,
            filename=f"image_{idx}.jpg",
            content_type="image/jpeg"
        )

    form.add_field("noise", str(data.get("noise", 0)))
    form.add_field("sepia", str(data.get("sepia", 0)))
    form.add_field("scratch", str(data.get("texture", 0)))
    form.add_field("quality", str(data.get("quality", 90)))
    form.add_field("format", "jpg")

    async with aiohttp.ClientSession() as session:
        async with session.post("http://old_photos_app:8000/process_images", data=form) as response:
            if response.status != 200:
                await message.answer("–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
                return
            zip_bytes = await response.read()

    zip_file = zipfile.ZipFile(io.BytesIO(zip_bytes))
    sent_files = set()
    for file_name in zip_file.namelist():
        if file_name in sent_files:
            continue
        sent_files.add(file_name)
        image_data = zip_file.read(file_name)
        await message.answer_photo(BufferedInputFile(image_data, filename=file_name))

    await state.clear()
    await message.answer("–í–∞—à–∏ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞—Å—Ç–∞—Ä–µ–Ω—ã!", reply_markup=inline_keyboards.back)
#===========================================================================================================================
# –ó–∞–≥–ª—É—à–∫–∞
#===========================================================================================================================

@router.message()
async def all_other_messages(message: Message):
    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ üßê",reply_markup=inline_keyboards.main)


#===========================================================================================================================
# –û—Ç–ª–æ–≤ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
#===========================================================================================================================

@router.callback_query()
async def unknown_callback(callback: CallbackQuery):
    logging.info(f"UNHANDLED CALLBACK: {callback.data}")
    await callback.answer(f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –ü–æ–ª—É—á–µ–Ω–æ: {callback.data}", show_alert=True)
